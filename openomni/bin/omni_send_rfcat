#!/usr/bin/env python2

from rflib import *
import argparse
import openomni
from openomni import Packet
import datetime

def send_packet(device, pod_id, seq, byte9_hex, message_type_hex, body_hex):

    body = body_hex.decode('hex')

    packet = Packet()
    packet.pod_address_1 = pod_id
    packet.packet_type = Packet.PACKET_TYPE_PDM
    packet.sequence = int(seq)
    packet.pod_address_2 = pod_id
    packet.byte9 = ord(byte9_hex.decode('hex'))
    packet.body = body
    packet.body_len = len(body)
    packet.message_type = message_type_hex.decode('hex')

    # Prepend preamble bytes
    preamble_length = 235 #324 is full amount, but rfcat errors if total length is > 255
    sync_word = "3c"
    packet_prefix = (("ab" * preamble_length) + sync_word).decode('hex')
    full_data = packet_prefix + packet.tx_data()
    print "Sending %s" % full_data.encode('hex')

    # Turn off modem preamble and syncword since we are doing our own
    openomni.disable_preamble(device)

    # Send data
    device.RFxmit(Packet.flip_bytes(full_data))

    # Restore modem preamble and syncword
    openomni.enable_preamble(device)


def main(options=None):

    parser = argparse.ArgumentParser(description='Send status packet to POD using rfcat.')
    parser.add_argument('--json', action='store_true',
                        help='print as json (default: text line)')

    parser.add_argument('pod_id', help='the pod id', type=str)
    parser.add_argument('seq', help='sequence number of the packet you wish to craft', type=int)
    parser.add_argument('byte9', help='byte9 value in hexadecimal', type=str)
    parser.add_argument('message_type', help='message_type value in hexadecimal', type=str)
    parser.add_argument('body', help='body of packet in hexadecimal', type=str)

    args = parser.parse_args()

    d = RfCat(0, debug=False)
    openomni.configure_rfcat(d)

    send_packet(d, pod_id=args.pod_id, seq=args.seq, byte9_hex=args.byte9, message_type_hex=args.message_type, body_hex=args.body)

    json = args.json

    while not keystop():
    	try:
    		pkt,ts = d.RFrecv()
    		pkt = Packet.flip_bytes(pkt)
    		rcv_time = datetime.datetime.now()

    		x = 0
    		while x < len(pkt):
    			packet = Packet(pkt[:len(pkt) - (x + 1)])
    			packet.received_at = rcv_time
    			if packet.is_valid():
    				#print packet.data.encode('hex')
    				if json:
    					print packet.as_json()
    				else:
    					print packet
    			x += 1

    	except ChipconUsbTimeoutException:
    		time.sleep(0.5)

    sys.stdin.read(1)


if __name__ == '__main__':
    main()
